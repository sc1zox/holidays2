---
interface Props {
    message: string,
    title: string,
    destination: string,
}

const {message, title,destination} = Astro.props;
const time = new Date()
---
<div class="position-fixed bottom-0 end-0 p-3" style="z-index: 11">
    <div id="liveToast" class="toast hide" role="alert" aria-live="assertive" aria-atomic="true">
        <div class="toast-header">
            <strong class="me-auto">{title}</strong>
            <small>{time.toLocaleTimeString()}</small>
            <button type="button" class="btn-close" data-bs-dismiss="toast" aria-label="Close"></button>
        </div>
        <div class="toast-body">
            <div class="d-flex flex-column">
                <p>{message}</p>
                <button type="button" id="contact" class="btn btn-primary btn-sm">Kontaktieren</button>
            </div>
        </div>
    </div>
</div>

<script define:vars={{destination}}>
    let shown = false;
    document.addEventListener('DOMContentLoaded', () => {

        const btn = document.getElementById('contact')
        if (btn) {
            btn.addEventListener('click', () => window.location.href = destination)
        }

        let shown = window.sessionStorage.getItem('toast') === 'true';
        const toastLive = document.getElementById('liveToast');

        if (toastLive && !shown) {
            setTimeout(async () => {
                const toast = new bootstrap.Toast(toastLive,{
                    delay: 20000,
                });
                toast.show();
                shown = true;
                window.sessionStorage.setItem('toast', shown.toString())
            }, 3000);
        }
    });
</script>